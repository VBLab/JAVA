POO : Je pense POO...C'est une façon de conceptualiser , une représentation des choses... Concept en blocs pour les faire interagir entre eux, afin de faciliter la programmation.
Mais c'est pas toujours plus simple !A différencier de la programmation procédurale, qui fait étape par étape, alors que objet propose un bloc de données.

Objet : C'est un exemplaire d'un certain type, c'est synonyme d'instance.
Instancier une classe, revient à créer un objet. 
Un objet représente un concept, une idée ou tout autre entité du monde physique comme une Voiture, une Personne ou encore une Page d’un livre. 
Il possède une structure interne, un comportement et il sait interagir avec ses pairs. 
Il s’agit donc de représenter ces objets et leurs relations; l’interaction entre les objets via leur relation permet de concevoir et réaliser les fonctionnalités attendues.

CONSTRUCTEUR :est une méthode, appelée implicitement à la création de l'objet, le programmeur est libre de définir les paramètres à passer au constructeur.
Si on est pointilleux, on fait une distinction entre méthode et constructeur...Dans le cas du constructeur, il porte  le nom de la classe.
Opérateur // NEW // ex : new personnage.=> on appelle le constructeur, on peut definir +s conctructeurs pour une classe.


CLASSE : un truc regroupant des variables et des fonctions, un groupement logique, que tout objet issu de cette classe possédera.
ex: moule à gateaux / on peut faire cuire plein de recette de pâtes dedans (pouelleux, far, coockies)
une classe comporte des attributs. Classe= Modèle. 

INSTANCE = usage d'un modèle. Instrancier une classe = créer une classe.
Attention l'instance, n'a aucune relation avec l'héritage.

HERITAGE :permet d'ajouter des éléments à une classe, de donner à une classe des propriétés propres à une autre.
C'est qqch qui va nous permettre de faciliter la réutilisation, il definie une relation entre les classes.
La classe/ Personne => Mère = généralisation ex: est une femme
La classe /  fille = spécialisation -hérite des attributs et des méthodes de la classe mère (opération = faire de la surchage)
ex : est une femme + étudiante
Opérateur // extends ex : fille extends=>Personne
si on ne met rien, toute les classes héritent de la classe OBject


ENCAPSULATION : pour interdire à un utilisateur de modifier directement les attributs d'un objet,
l'utilisateur doit se contenter d'invoquer les méthodes, et donc d'ignorer les attributs.
c'est la visibilité, def pour les attributs et les méthodes.
Pour instaurer une telle contrainte, on dit que les attributs sont “privés”. 
EX //  les drivers de base de données proposent des méthodes pour lire, écrire dans la bdd et nous n’avons pas besoin ni envie de voir le code qui le réalise.
private / attributs
public / methods
si on ne met rien, on dit que c'est package, visible par toutes les classes.
Protect // attributs visible par toutes les filles.


POLYMORPHISME :
quand une méthode est utilisée dans une classe mère, j'ai le droit de la réécrire dans une classe fille.
Permet d'avoir des classes différentes mais qui partagent une méthode commume...

LES COLLECTIONS D'OBJETS: Une collection permet de stocker un nombre variable d'objet.

/*syntaxe précise = qd tu déclares ton ArrayList ArrayList<case> +nom
ce qu'il y a entre <>, permet de typer l'ArrayList.
pour pouvoir faire ça je dois déjà avoir une classe CASE.
et sa seule fonction est d'être la mère de toute les autres.*/

// ArrayList simplifie la vie car évite de 
//manipuler des tableaux trop complexes.

//utiliser le package "java.util.ArrayList"

les objets de type List servent à stocker des objets sans condition particulière sur la façon de les stocker.
Ils acceptent toutes les valeurs,même les valeurs null.
Pour simplifier = tableaux extensibles à volonté.(on peut insérer autant d'élément que l'on veut sans craindre de dépasser la taille).

Les autres types de collection : 
//Set 
et //Map (stockent un cople clé-valeur)




